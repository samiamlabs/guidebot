#!/usr/bin/env python
import roslib
import rospy

import tf
from tf.transformations import quaternion_from_euler, euler_from_quaternion

from geometry_msgs.msg import Pose, PoseArray, PointStamped, PoseStamped, Quaternion
from nav_msgs.msg import Path

from std_srvs.srv import *

import numpy as np
from scipy.interpolate import splprep, splev


def orientation_from_yaw(yaw):
    return Quaternion(*quaternion_from_euler(0, 0, yaw))


class PathFromPoints():
    def __init__(self):
        rospy.init_node('path_from_points')

        self.clear()

        rospy.Subscriber('/clicked_point', PointStamped, self.clicked_point_cb)
        rospy.Subscriber('/move_base_simple/goal',
                         PoseStamped, self.move_base_goal_cb)

        self._path_publisher = rospy.Publisher(
            'linefollow_path', Path, queue_size=10)

        self._pose_array_publisher = rospy.Publisher(
            'linefollow_pose_array', PoseArray, queue_size=10)

        clearService = rospy.Service(
            'clear_linefollow_path', Empty, self.handle_clear)

        setInterpolationService = rospy.Service(
            'set_interpolate', SetBool, self.handle_set_interpolate)

        rospy.Subscriber('/move_base/GlobalPlanner/plan',
                         Path, self.global_plan_cb)

        self.global_pose_array_publisher = rospy.Publisher(
            '/global_plan_array', PoseArray, queue_size=10)

        self._interpolate = True
        self._interpolate_quadratic = False

        rospy.spin()

    def global_plan_cb(self, msg):
        pose_array = PoseArray()
        pose_array.header.frame_id = 'map'
        for pose_stamped in msg.poses:
            pose_array.poses.append(pose_stamped.pose)
        self.global_pose_array_publisher.publish(pose_array)

    def clear(self):
        rospy.loginfo('Clearing linefollow path')

        self._points = None
        self._angles = None

    def handle_clear(self, req):
        self.clear()

        return EmptyResponse()

    def handle_set_interpolate(self, req):
        rospy.loginfo('Setting interpolation')
        self._interpolate = req.data

        return SetBoolResponse()

    def move_base_goal_cb(self, msg):
        rospy.loginfo("Move base goal received, clearing path")
        self.clear()
        # self._path_publisher.publish(Path())

    def add_point(self, x, y):
        if self._points is None:
            self._points = np.array([[x, y]])
        else:
            self._points = np.concatenate(
                (self._points, [[x, y]]))

        # Calclate pose orientation
        delta_points = np.diff(self._points, axis=0)
        if delta_points.shape[0] == 0:
            delta_points = np.array([[0, 0], [0, 0]])
        else:
            delta_points = np.concatenate((delta_points, [delta_points[-1]]))

        self._angles = np.arctan2(
            delta_points[:, 1], delta_points[:, 0])  # * 180 / np.pi

    def publish_path(self):

        path = Path()
        path.header.frame_id = 'map'

        if self._interpolate:
            points = self._interpolated_points
            angles = self._interpolated_angles
        else:
            points = self._points
            angles = self._angles

        for point, angle in zip(points, angles):

            # rospy.logwarn("x: %f, y: %f, angle: %f", point[0], point[1], angle)

            pose_stamped = PoseStamped()

            pose_stamped.header.frame_id = 'map'
            pose_stamped.pose.position.x = point[0]
            pose_stamped.pose.position.y = point[1]
            pose_stamped.pose.orientation = orientation_from_yaw(angle)

            path.poses.append(pose_stamped)

        # rospy.logwarn("Publishing path")
        self._path_publisher.publish(path)

    def publish_pose_array(self):
        pose_array = PoseArray()
        pose_array.header.frame_id = 'map'

        if self._interpolate:
            points = self._interpolated_points
            angles = self._interpolated_angles
        else:
            points = self._points
            angles = self._angles

        for point, angle in zip(points, angles):

            pose = Pose()

            pose.position.x = point[0]
            pose.position.y = point[1]
            pose.orientation = orientation_from_yaw(angle)

            pose_array.poses.append(pose)

        self._pose_array_publisher.publish(pose_array)

    def clicked_point_cb(self, msg):
        self.add_point(msg.point.x, msg.point.y)
        rospy.sleep(0)

        if self._interpolate:
            self.interpolate_points()

        self.publish_path()
        self.publish_pose_array()

    def interpolate_points(self):

        if self._points.shape[0] == 1:
            self._interpolated_points = self._points
            self._interpolated_angles = self._angles
            return
        elif self._points.shape[0] < 4 or not self._interpolate_quadratic:
            tck, u = splprep(self._points.T, k=1, u=None, s=0.0)
        else:
            tck, u = splprep(self._points.T, u=None, s=0.0)

        distance = 0
        for point, next_point in zip(self._points, self._points[1:]):
            distance += np.linalg.norm(point - next_point)

        resolution = 0.1
        number_of_points = distance/resolution

        u_new = np.linspace(u.min(), u.max(), int(number_of_points))
        x_new, y_new = splev(u_new, tck, der=0)

        self._interpolated_points = np.zeros((x_new.shape[0], 2))
        self._interpolated_points[:, 0] = x_new
        self._interpolated_points[:, 1] = y_new

        # Calclate pose orientation
        delta_points = np.diff(self._interpolated_points, axis=0)
        if delta_points.shape[0] == 0:
            delta_points = np.array([[0, 0], [0, 0]])
        else:
            delta_points = np.concatenate((delta_points, [delta_points[-1]]))

        self._interpolated_angles = np.arctan2(
            delta_points[:, 1], delta_points[:, 0])



if __name__ == '__main__':
    PathFromPoints()
